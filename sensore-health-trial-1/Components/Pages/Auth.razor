@page "/auth"
@page "/auth/login"
@page "/auth/signup"
@rendermode InteractiveServer

<div class="auth-container">
    <div class="auth-card">

        <div class="header-container">
            <img src="images/sensore.png" alt="Sensore Logo" class="logo" />
            <h1 class="title">Sensore GrapheneTrace</h1>
        </div>
        <h2 class="subtitle">@(isSignUp ? "Create an account" : "Sign in to continue")</h2>

        <div class="form-group">
            <label>Account Type</label>
            <select @bind="accountType" class="form-control">
                <option value="">Select account type</option>
                <option value="Patient">Patient</option>
                <option value="Clinician">Clinician</option>
                <option value="Admin">Admin</option>
            </select>
        </div>

        <div class="form-group">
            <label>Email</label>
            <input type="email" 
                   @bind="email" 
                   class="form-control" 
                   placeholder="Enter your email" />
        </div>

        <div class="form-group">
            <label>Password</label>
            <input type="password" 
                   @bind="password" 
                   class="form-control" 
                   placeholder="Enter your password" />
        </div>

        @if (isSignUp)
        {
            <div class="form-group">
                <label>Confirm Password</label>
                <input type="password" 
                       @bind="confirmPassword" 
                       class="form-control" 
                       placeholder="Confirm your password" />
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }

        <button @onclick="HandleSubmit" class="btn-signin" type="button">
            @(isSignUp ? "Sign Up" : "Sign In")
        </button>

        <div class="footer-links">
            @if (!isSignUp)
            {
                <button type="button" @onclick="ShowForgotPassword" class="link-button">Forgot password?</button>
            }
            <button type="button" @onclick="ToggleMode" class="link-button">
                @(isSignUp ? "Already have an account? Sign In" : "Need an account? Sign Up")
            </button>
            <a href="#" class="help-link">Need help?</a>
        </div>
    </div>
</div>

@using System
@using Microsoft.JSInterop
@using sensore_health_trial_1.Services
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthService
@inject IJSRuntime JS

@code {
    private string accountType = "";
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private bool isSignUp = false;

    protected override void OnInitialized()
    {
        // Check URL to determine if we're on signup
        var uri = NavigationManager.Uri;
        isSignUp = uri.Contains("/signup");
    }

    private void ToggleMode()
    {
        Console.WriteLine($"ToggleMode called. Current isSignUp: {isSignUp}");
        isSignUp = !isSignUp;
        errorMessage = "";
        confirmPassword = "";
        Console.WriteLine($"After toggle. New isSignUp: {isSignUp}");
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        errorMessage = "";

        // Validation
        if (string.IsNullOrWhiteSpace(accountType))
        {
            errorMessage = "Please select an account type";
            return;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            errorMessage = "Please enter your email";
            return;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Please enter your password";
            return;
        }

        if (isSignUp && password != confirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        if (isSignUp)
        {
            await HandleSignUp();
        }
        else
        {
            await HandleSignIn();
        }
    }

    private async Task HandleSignIn()
    {
        var result = await AuthService.SignInAsync(email, password, accountType);

        if (result.Success)
        {
            // Successfully signed in, redirect using JS to ensure cookies are properly set
            string redirectUrl = accountType.ToLower() switch
            {
                "patient" => "/dashboard/patient",
                "clinician" => "/dashboard/clinician",
                "admin" => "/dashboard/admin",
                _ => "/"
            };

            await JS.InvokeVoidAsync("location.assign", redirectUrl);
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

    private async Task HandleSignUp()
    {
        var result = await AuthService.SignUpAsync(email, password, accountType);

        if (result.Success)
        {
            // Account created, now sign in
            await HandleSignIn();
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

    private void ShowForgotPassword()
    {
        // TODO: Navigate to forgot password page or show modal
        // NavigationManager.NavigateTo("/auth/forgot-password");
    }
}